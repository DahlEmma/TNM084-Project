{
  "version": 3,
  "sources": ["../three/examples/jsm/geometries/LightningStrike.js", "../three/examples/jsm/math/SimplexNoise.js"],
  "sourcesContent": ["import {\n\tBufferGeometry,\n\tDynamicDrawUsage,\n\tFloat32BufferAttribute,\n\tMathUtils,\n\tUint32BufferAttribute,\n\tVector3\n} from 'three';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * @fileoverview LightningStrike object for creating lightning strikes and voltaic arcs.\n *\n *\n * Usage\n *\n * var myRay = new LightningStrike( paramsObject );\n * var myRayMesh = new THREE.Mesh( myRay, myMaterial );\n * scene.add( myRayMesh );\n * ...\n * myRay.update( currentTime );\n *\n * The \"currentTime\" can vary its rate, go forwards, backwards or even jump, but it cannot be negative.\n *\n * You should normally leave the ray position to (0, 0, 0). You should control it by changing the sourceOffset and destOffset parameters.\n *\n *\n * LightningStrike parameters\n *\n * The paramsObject can contain any of the following parameters.\n *\n * Legend:\n * 'LightningStrike' (also called 'ray'): An independent voltaic arc with its ramifications and defined with a set of parameters.\n * 'Subray': A ramification of the ray. It is not a LightningStrike object.\n * 'Segment': A linear segment piece of a subray.\n * 'Leaf segment': A ray segment which cannot be smaller.\n *\n *\n * The following parameters can be changed any time and if they vary smoothly, the ray form will also change smoothly:\n *\n * @param {Vector3} sourceOffset The point where the ray starts.\n *\n * @param {Vector3} destOffset The point where the ray ends.\n *\n * @param {double} timeScale The rate at wich the ray form changes in time. Default: 1\n *\n * @param {double} roughness From 0 to 1. The higher the value, the more wrinkled is the ray. Default: 0.9\n *\n * @param {double} straightness From 0 to 1. The higher the value, the more straight will be a subray path. Default: 0.7\n *\n * @param {Vector3} up0 Ray 'up' direction at the ray starting point. Must be normalized. It should be perpendicular to the ray forward direction but it doesn't matter much.\n *\n * @param {Vector3} up1 Like the up0 parameter but at the end of the ray. Must be normalized.\n *\n * @param {double} radius0 Radius of the main ray trunk at the start point. Default: 1\n *\n * @param {double} radius1 Radius of the main ray trunk at the end point. Default: 1\n *\n * @param {double} radius0Factor The radius0 of a subray is this factor times the radius0 of its parent subray. Default: 0.5\n *\n * @param {double} radius1Factor The radius1 of a subray is this factor times the radius1 of its parent subray. Default: 0.2\n *\n * @param {minRadius} Minimum value a subray radius0 or radius1 can get. Default: 0.1\n *\n *\n * The following parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n *\n * @param {boolean} isEternal If true the ray never extinguishes. Otherwise its life is controlled by the 'birthTime' and 'deathTime' parameters. Default: true if any of those two parameters is undefined.\n *\n * @param {double} birthTime The time at which the ray starts its life and begins propagating. Only if isEternal is false. Default: None.\n *\n * @param {double} deathTime The time at which the ray ends vanishing and its life. Only if isEternal is false. Default: None.\n *\n * @param {double} propagationTimeFactor From 0 to 1. Lifetime factor at which the ray ends propagating and enters the steady phase. For example, 0.1 means it is propagating 1/10 of its lifetime. Default: 0.1\n *\n * @param {double} vanishingTimeFactor From 0 to 1. Lifetime factor at which the ray ends the steady phase and begins vanishing. For example, 0.9 means it is vanishing 1/10 of its lifetime. Default: 0.9\n *\n * @param {double} subrayPeriod Subrays cycle periodically. This is their time period. Default: 4\n *\n * @param {double} subrayDutyCycle From 0 to 1. This is the fraction of time a subray is active. Default: 0.6\n *\n *\n * These parameters cannot change after lightning creation:\n *\n * @param {integer} maxIterations: Greater than 0. The number of ray's leaf segments is 2**maxIterations. Default: 9\n *\n * @param {boolean} isStatic Set to true only for rays which won't change over time and are not attached to moving objects (Rare case). It is used to set the vertex buffers non-dynamic. You can omit calling update() for these rays.\n *\n * @param {integer} ramification Greater than 0. Maximum number of child subrays a subray can have. Default: 5\n *\n * @param {integer} maxSubrayRecursion Greater than 0. Maximum level of recursion (subray descendant generations). Default: 3\n *\n * @param {double} recursionProbability From 0 to 1. The lower the value, the less chance each new generation of subrays has to generate new subrays. Default: 0.6\n *\n * @param {boolean} generateUVs If true, the ray geometry will have uv coordinates generated. u runs along the ray, and v across its perimeter. Default: false.\n *\n * @param {Object} randomGenerator Set here your random number generator which will seed the SimplexNoise and other decisions during ray tree creation.\n * It can be used to generate repeatable rays. For that, set also the noiseSeed parameter, and each ray created with that generator and seed pair will be identical in time.\n * The randomGenerator parameter should be an object with a random() function similar to Math.random, but seedable.\n * It must have also a getSeed() method, which returns the current seed, and a setSeed( seed ) method, which accepts as seed a fractional number from 0 to 1, as well as any other number.\n * The default value is an internal generator for some uses and Math.random for others (It is non-repeatable even if noiseSeed is supplied)\n *\n * @param {double} noiseSeed Seed used to make repeatable rays (see the randomGenerator)\n *\n * @param {function} onDecideSubrayCreation Set this to change the callback which decides subray creation. You can look at the default callback in the code (createDefaultSubrayCreationCallbacks)for more info.\n *\n * @param {function} onSubrayCreation This is another callback, more simple than the previous one. It can be used to adapt the form of subrays or other parameters once a subray has been created and initialized. It is used in the examples to adapt subrays to a sphere or to a plane.\n *\n *\n*/\n\nclass LightningStrike extends BufferGeometry {\n\n\tconstructor( rayParameters = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LightningStrike';\n\n\t\t// Set parameters, and set undefined parameters to default values\n\t\tthis.init( LightningStrike.copyParameters( rayParameters, rayParameters ) );\n\n\t\t// Creates and populates the mesh\n\t\tthis.createMesh();\n\n\t}\n\n\tstatic createRandomGenerator() {\n\n\t\tconst numSeeds = 2053;\n\t\tconst seeds = [];\n\n\t\tfor ( let i = 0; i < numSeeds; i ++ ) {\n\n\t\t\tseeds.push( Math.random() );\n\n\t\t}\n\n\t\tconst generator = {\n\n\t\t\tcurrentSeed: 0,\n\n\t\t\trandom: function () {\n\n\t\t\t\tconst value = seeds[ generator.currentSeed ];\n\n\t\t\t\tgenerator.currentSeed = ( generator.currentSeed + 1 ) % numSeeds;\n\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetSeed: function () {\n\n\t\t\t\treturn generator.currentSeed / numSeeds;\n\n\t\t\t},\n\n\t\t\tsetSeed: function ( seed ) {\n\n\t\t\t\tgenerator.currentSeed = Math.floor( seed * numSeeds ) % numSeeds;\n\n\t\t\t}\n\n\t\t};\n\n\t\treturn generator;\n\n\t}\n\n\tstatic copyParameters( dest = {}, source = {} ) {\n\n\t\tconst vecCopy = function ( v ) {\n\n\t\t\tif ( source === dest ) {\n\n\t\t\t\treturn v;\n\n\t\t\t} else {\n\n\t\t\t\treturn v.clone();\n\n\t\t\t}\n\n\t\t};\n\n\t\tdest.sourceOffset = source.sourceOffset !== undefined ? vecCopy( source.sourceOffset ) : new Vector3( 0, 100, 0 ),\n\t\tdest.destOffset = source.destOffset !== undefined ? vecCopy( source.destOffset ) : new Vector3( 0, 0, 0 ),\n\n\t\tdest.timeScale = source.timeScale !== undefined ? source.timeScale : 1,\n\t\tdest.roughness = source.roughness !== undefined ? source.roughness : 0.9,\n\t\tdest.straightness = source.straightness !== undefined ? source.straightness : 0.7,\n\n\t\tdest.up0 = source.up0 !== undefined ? vecCopy( source.up0 ) : new Vector3( 0, 0, 1 );\n\t\tdest.up1 = source.up1 !== undefined ? vecCopy( source.up1 ) : new Vector3( 0, 0, 1 ),\n\t\tdest.radius0 = source.radius0 !== undefined ? source.radius0 : 1,\n\t\tdest.radius1 = source.radius1 !== undefined ? source.radius1 : 1,\n\t\tdest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5,\n\t\tdest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2,\n\t\tdest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2,\n\n\t\t// These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n\n\t\tdest.isEternal = source.isEternal !== undefined ? source.isEternal : ( source.birthTime === undefined || source.deathTime === undefined ),\n\t\tdest.birthTime = source.birthTime,\n\t\tdest.deathTime = source.deathTime,\n\t\tdest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1,\n\t\tdest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9,\n\t\tdest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4,\n\t\tdest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6;\n\n\t\t// These parameters cannot change after lightning creation:\n\n\t\tdest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\n\t\tdest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\n\t\tdest.ramification = source.ramification !== undefined ? source.ramification : 5;\n\t\tdest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\n\t\tdest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\n\t\tdest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\n\t\tdest.randomGenerator = source.randomGenerator,\n\t\tdest.noiseSeed = source.noiseSeed,\n\t\tdest.onDecideSubrayCreation = source.onDecideSubrayCreation,\n\t\tdest.onSubrayCreation = source.onSubrayCreation;\n\n\t\treturn dest;\n\n\t}\n\n\tupdate( time ) {\n\n\t\tif ( this.isStatic ) return;\n\n\t\tif ( this.rayParameters.isEternal || ( this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime ) ) {\n\n\t\t\tthis.updateMesh( time );\n\n\t\t\tif ( time < this.subrays[ 0 ].endPropagationTime ) {\n\n\t\t\t\tthis.state = LightningStrike.RAY_PROPAGATING;\n\n\t\t\t} else if ( time > this.subrays[ 0 ].beginVanishingTime ) {\n\n\t\t\t\tthis.state = LightningStrike.RAY_VANISHING;\n\n\t\t\t} else {\n\n\t\t\t\tthis.state = LightningStrike.RAY_STEADY;\n\n\t\t\t}\n\n\t\t\tthis.visible = true;\n\n\t\t} else {\n\n\t\t\tthis.visible = false;\n\n\t\t\tif ( time < this.rayParameters.birthTime ) {\n\n\t\t\t\tthis.state = LightningStrike.RAY_UNBORN;\n\n\t\t\t} else {\n\n\t\t\t\tthis.state = LightningStrike.RAY_EXTINGUISHED;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tinit( rayParameters ) {\n\n\t\t// Init all the state from the parameters\n\n\t\tthis.rayParameters = rayParameters;\n\n\t\t// These parameters cannot change after lightning creation:\n\n\t\tthis.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor( rayParameters.maxIterations ) : 9;\n\t\trayParameters.maxIterations = this.maxIterations;\n\t\tthis.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\n\t\trayParameters.isStatic = this.isStatic;\n\t\tthis.ramification = rayParameters.ramification !== undefined ? Math.floor( rayParameters.ramification ) : 5;\n\t\trayParameters.ramification = this.ramification;\n\t\tthis.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor( rayParameters.maxSubrayRecursion ) : 3;\n\t\trayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n\t\tthis.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\n\t\trayParameters.recursionProbability = this.recursionProbability;\n\t\tthis.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\n\t\trayParameters.generateUVs = this.generateUVs;\n\n\t\t// Random generator\n\t\tif ( rayParameters.randomGenerator !== undefined ) {\n\n\t\t\tthis.randomGenerator = rayParameters.randomGenerator;\n\t\t\tthis.seedGenerator = rayParameters.randomGenerator;\n\n\t\t\tif ( rayParameters.noiseSeed !== undefined ) {\n\n\t\t\t\tthis.seedGenerator.setSeed( rayParameters.noiseSeed );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.randomGenerator = LightningStrike.createRandomGenerator();\n\t\t\tthis.seedGenerator = Math;\n\n\t\t}\n\n\t\t// Ray creation callbacks\n\t\tif ( rayParameters.onDecideSubrayCreation !== undefined ) {\n\n\t\t\tthis.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n\n\t\t} else {\n\n\t\t\tthis.createDefaultSubrayCreationCallbacks();\n\n\t\t\tif ( rayParameters.onSubrayCreation !== undefined ) {\n\n\t\t\t\tthis.onSubrayCreation = rayParameters.onSubrayCreation;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Internal state\n\n\t\tthis.state = LightningStrike.RAY_INITIALIZED;\n\n\t\tthis.maxSubrays = Math.ceil( 1 + Math.pow( this.ramification, Math.max( 0, this.maxSubrayRecursion - 1 ) ) );\n\t\trayParameters.maxSubrays = this.maxSubrays;\n\n\t\tthis.maxRaySegments = 2 * ( 1 << this.maxIterations );\n\n\t\tthis.subrays = [];\n\n\t\tfor ( let i = 0; i < this.maxSubrays; i ++ ) {\n\n\t\t\tthis.subrays.push( this.createSubray() );\n\n\t\t}\n\n\t\tthis.raySegments = [];\n\n\t\tfor ( let i = 0; i < this.maxRaySegments; i ++ ) {\n\n\t\t\tthis.raySegments.push( this.createSegment() );\n\n\t\t}\n\n\t\tthis.time = 0;\n\t\tthis.timeFraction = 0;\n\t\tthis.currentSegmentCallback = null;\n\t\tthis.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n\t\tthis.numSubrays = 0;\n\t\tthis.currentSubray = null;\n\t\tthis.currentSegmentIndex = 0;\n\t\tthis.isInitialSegment = false;\n\t\tthis.subrayProbability = 0;\n\n\t\tthis.currentVertex = 0;\n\t\tthis.currentIndex = 0;\n\t\tthis.currentCoordinate = 0;\n\t\tthis.currentUVCoordinate = 0;\n\t\tthis.vertices = null;\n\t\tthis.uvs = null;\n\t\tthis.indices = null;\n\t\tthis.positionAttribute = null;\n\t\tthis.uvsAttribute = null;\n\n\t\tthis.simplexX = new SimplexNoise( this.seedGenerator );\n\t\tthis.simplexY = new SimplexNoise( this.seedGenerator );\n\t\tthis.simplexZ = new SimplexNoise( this.seedGenerator );\n\n\t\t// Temp vectors\n\t\tthis.forwards = new Vector3();\n\t\tthis.forwardsFill = new Vector3();\n\t\tthis.side = new Vector3();\n\t\tthis.down = new Vector3();\n\t\tthis.middlePos = new Vector3();\n\t\tthis.middleLinPos = new Vector3();\n\t\tthis.newPos = new Vector3();\n\t\tthis.vPos = new Vector3();\n\t\tthis.cross1 = new Vector3();\n\n\t}\n\n\tcreateMesh() {\n\n\t\tconst maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n\n\t\tconst maxVerts = 3 * ( maxDrawableSegmentsPerSubRay + 1 ) * this.maxSubrays;\n\t\tconst maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n\n\t\tthis.vertices = new Float32Array( maxVerts * 3 );\n\t\tthis.indices = new Uint32Array( maxIndices );\n\n\t\tif ( this.generateUVs ) {\n\n\t\t\tthis.uvs = new Float32Array( maxVerts * 2 );\n\n\t\t}\n\n\t\t// Populate the mesh\n\t\tthis.fillMesh( 0 );\n\n\t\tthis.setIndex( new Uint32BufferAttribute( this.indices, 1 ) );\n\n\t\tthis.positionAttribute = new Float32BufferAttribute( this.vertices, 3 );\n\t\tthis.setAttribute( 'position', this.positionAttribute );\n\n\t\tif ( this.generateUVs ) {\n\n\t\t\tthis.uvsAttribute = new Float32BufferAttribute( new Float32Array( this.uvs ), 2 );\n\t\t\tthis.setAttribute( 'uv', this.uvsAttribute );\n\n\t\t}\n\n\t\tif ( ! this.isStatic ) {\n\n\t\t\tthis.index.usage = DynamicDrawUsage;\n\t\t\tthis.positionAttribute.usage = DynamicDrawUsage;\n\n\t\t\tif ( this.generateUVs ) {\n\n\t\t\t\tthis.uvsAttribute.usage = DynamicDrawUsage;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Store buffers for later modification\n\t\tthis.vertices = this.positionAttribute.array;\n\t\tthis.indices = this.index.array;\n\n\t\tif ( this.generateUVs ) {\n\n\t\t\tthis.uvs = this.uvsAttribute.array;\n\n\t\t}\n\n\t}\n\n\tupdateMesh( time ) {\n\n\t\tthis.fillMesh( time );\n\n\t\tthis.drawRange.count = this.currentIndex;\n\n\t\tthis.index.needsUpdate = true;\n\n\t\tthis.positionAttribute.needsUpdate = true;\n\n\t\tif ( this.generateUVs ) {\n\n\t\t\tthis.uvsAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tfillMesh( time ) {\n\n\t\tconst scope = this;\n\n\t\tthis.currentVertex = 0;\n\t\tthis.currentIndex = 0;\n\t\tthis.currentCoordinate = 0;\n\t\tthis.currentUVCoordinate = 0;\n\n\t\tthis.fractalRay( time, function fillVertices( segment ) {\n\n\t\t\tconst subray = scope.currentSubray;\n\n\t\t\tif ( time < subray.birthTime ) { //&& ( ! this.rayParameters.isEternal || scope.currentSubray.recursion > 0 ) ) {\n\n\t\t\t\treturn;\n\n\t\t\t} else if ( this.rayParameters.isEternal && scope.currentSubray.recursion == 0 ) {\n\n\t\t\t\t// Eternal rays don't propagate nor vanish, but its subrays do\n\n\t\t\t\tscope.createPrism( segment );\n\n\t\t\t\tscope.onDecideSubrayCreation( segment, scope );\n\n\t\t\t} else if ( time < subray.endPropagationTime ) {\n\n\t\t\t\tif ( scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor ) {\n\n\t\t\t\t\t// Ray propagation has arrived to this segment\n\n\t\t\t\t\tscope.createPrism( segment );\n\n\t\t\t\t\tscope.onDecideSubrayCreation( segment, scope );\n\n\t\t\t\t}\n\n\t\t\t} else if ( time < subray.beginVanishingTime ) {\n\n\t\t\t\t// Ray is steady (nor propagating nor vanishing)\n\n\t\t\t\tscope.createPrism( segment );\n\n\t\t\t\tscope.onDecideSubrayCreation( segment, scope );\n\n\t\t\t} else {\n\n\t\t\t\tif ( scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * ( 1 - subray.vanishingTimeFactor ) ) {\n\n\t\t\t\t\t// Segment has not yet vanished\n\n\t\t\t\t\tscope.createPrism( segment );\n\n\t\t\t\t}\n\n\t\t\t\tscope.onDecideSubrayCreation( segment, scope );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\taddNewSubray( /*rayParameters*/ ) {\n\n\t\treturn this.subrays[ this.numSubrays ++ ];\n\n\t}\n\n\tinitSubray( subray, rayParameters ) {\n\n\t\tsubray.pos0.copy( rayParameters.sourceOffset );\n\t\tsubray.pos1.copy( rayParameters.destOffset );\n\t\tsubray.up0.copy( rayParameters.up0 );\n\t\tsubray.up1.copy( rayParameters.up1 );\n\t\tsubray.radius0 = rayParameters.radius0;\n\t\tsubray.radius1 = rayParameters.radius1;\n\t\tsubray.birthTime = rayParameters.birthTime;\n\t\tsubray.deathTime = rayParameters.deathTime;\n\t\tsubray.timeScale = rayParameters.timeScale;\n\t\tsubray.roughness = rayParameters.roughness;\n\t\tsubray.straightness = rayParameters.straightness;\n\t\tsubray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n\t\tsubray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n\n\t\tsubray.maxIterations = this.maxIterations;\n\t\tsubray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\n\t\tsubray.recursion = 0;\n\n\t}\n\n\tfractalRay( time, segmentCallback ) {\n\n\t\tthis.time = time;\n\t\tthis.currentSegmentCallback = segmentCallback;\n\t\tthis.numSubrays = 0;\n\n\t\t// Add the top level subray\n\t\tthis.initSubray( this.addNewSubray(), this.rayParameters );\n\n\t\t// Process all subrays that are being generated until consuming all of them\n\t\tfor ( let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex ++ ) {\n\n\t\t\tconst subray = this.subrays[ subrayIndex ];\n\t\t\tthis.currentSubray = subray;\n\n\t\t\tthis.randomGenerator.setSeed( subray.seed );\n\n\t\t\tsubray.endPropagationTime = MathUtils.lerp( subray.birthTime, subray.deathTime, subray.propagationTimeFactor );\n\t\t\tsubray.beginVanishingTime = MathUtils.lerp( subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor );\n\n\t\t\tconst random1 = this.randomGenerator.random;\n\t\t\tsubray.linPos0.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\n\t\t\tsubray.linPos1.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\n\n\t\t\tthis.timeFraction = ( time - subray.birthTime ) / ( subray.deathTime - subray.birthTime );\n\n\t\t\tthis.currentSegmentIndex = 0;\n\t\t\tthis.isInitialSegment = true;\n\n\t\t\tconst segment = this.getNewSegment();\n\t\t\tsegment.iteration = 0;\n\t\t\tsegment.pos0.copy( subray.pos0 );\n\t\t\tsegment.pos1.copy( subray.pos1 );\n\t\t\tsegment.linPos0.copy( subray.linPos0 );\n\t\t\tsegment.linPos1.copy( subray.linPos1 );\n\t\t\tsegment.up0.copy( subray.up0 );\n\t\t\tsegment.up1.copy( subray.up1 );\n\t\t\tsegment.radius0 = subray.radius0;\n\t\t\tsegment.radius1 = subray.radius1;\n\t\t\tsegment.fraction0 = 0;\n\t\t\tsegment.fraction1 = 1;\n\t\t\tsegment.positionVariationFactor = 1 - subray.straightness;\n\n\t\t\tthis.subrayProbability = this.ramification * Math.pow( this.recursionProbability, subray.recursion ) / ( 1 << subray.maxIterations );\n\n\t\t\tthis.fractalRayRecursive( segment );\n\n\t\t}\n\n\t\tthis.currentSegmentCallback = null;\n\t\tthis.currentSubray = null;\n\n\t}\n\n\tfractalRayRecursive( segment ) {\n\n\t\t// Leave recursion condition\n\t\tif ( segment.iteration >= this.currentSubray.maxIterations ) {\n\n\t\t\tthis.currentSegmentCallback( segment );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Interpolation\n\t\tthis.forwards.subVectors( segment.pos1, segment.pos0 );\n\t\tlet lForwards = this.forwards.length();\n\n\t\tif ( lForwards < 0.000001 ) {\n\n\t\t\tthis.forwards.set( 0, 0, 0.01 );\n\t\t\tlForwards = this.forwards.length();\n\n\t\t}\n\n\t\tconst middleRadius = ( segment.radius0 + segment.radius1 ) * 0.5;\n\t\tconst middleFraction = ( segment.fraction0 + segment.fraction1 ) * 0.5;\n\n\t\tconst timeDimension = this.time * this.currentSubray.timeScale * Math.pow( 2, segment.iteration );\n\n\t\tthis.middlePos.lerpVectors( segment.pos0, segment.pos1, 0.5 );\n\t\tthis.middleLinPos.lerpVectors( segment.linPos0, segment.linPos1, 0.5 );\n\t\tconst p = this.middleLinPos;\n\n\t\t// Noise\n\t\tthis.newPos.set( this.simplexX.noise4d( p.x, p.y, p.z, timeDimension ),\n\t\t\tthis.simplexY.noise4d( p.x, p.y, p.z, timeDimension ),\n\t\t\tthis.simplexZ.noise4d( p.x, p.y, p.z, timeDimension ) );\n\n\t\tthis.newPos.multiplyScalar( segment.positionVariationFactor * lForwards );\n\t\tthis.newPos.add( this.middlePos );\n\n\t\t// Recursion\n\n\t\tconst newSegment1 = this.getNewSegment();\n\t\tnewSegment1.pos0.copy( segment.pos0 );\n\t\tnewSegment1.pos1.copy( this.newPos );\n\t\tnewSegment1.linPos0.copy( segment.linPos0 );\n\t\tnewSegment1.linPos1.copy( this.middleLinPos );\n\t\tnewSegment1.up0.copy( segment.up0 );\n\t\tnewSegment1.up1.copy( segment.up1 );\n\t\tnewSegment1.radius0 = segment.radius0;\n\t\tnewSegment1.radius1 = middleRadius;\n\t\tnewSegment1.fraction0 = segment.fraction0;\n\t\tnewSegment1.fraction1 = middleFraction;\n\t\tnewSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n\t\tnewSegment1.iteration = segment.iteration + 1;\n\n\t\tconst newSegment2 = this.getNewSegment();\n\t\tnewSegment2.pos0.copy( this.newPos );\n\t\tnewSegment2.pos1.copy( segment.pos1 );\n\t\tnewSegment2.linPos0.copy( this.middleLinPos );\n\t\tnewSegment2.linPos1.copy( segment.linPos1 );\n\t\tthis.cross1.crossVectors( segment.up0, this.forwards.normalize() );\n\t\tnewSegment2.up0.crossVectors( this.forwards, this.cross1 ).normalize();\n\t\tnewSegment2.up1.copy( segment.up1 );\n\t\tnewSegment2.radius0 = middleRadius;\n\t\tnewSegment2.radius1 = segment.radius1;\n\t\tnewSegment2.fraction0 = middleFraction;\n\t\tnewSegment2.fraction1 = segment.fraction1;\n\t\tnewSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n\t\tnewSegment2.iteration = segment.iteration + 1;\n\n\t\tthis.fractalRayRecursive( newSegment1 );\n\n\t\tthis.fractalRayRecursive( newSegment2 );\n\n\t}\n\n\tcreatePrism( segment ) {\n\n\t\t// Creates one triangular prism and its vertices at the segment\n\n\t\tthis.forwardsFill.subVectors( segment.pos1, segment.pos0 ).normalize();\n\n\t\tif ( this.isInitialSegment ) {\n\n\t\t\tthis.currentCreateTriangleVertices( segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0 );\n\n\t\t\tthis.isInitialSegment = false;\n\n\t\t}\n\n\t\tthis.currentCreateTriangleVertices( segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1 );\n\n\t\tthis.createPrismFaces();\n\n\t}\n\n\tcreateTriangleVerticesWithoutUVs( pos, up, forwards, radius ) {\n\n\t\t// Create an equilateral triangle (only vertices)\n\n\t\tthis.side.crossVectors( up, forwards ).multiplyScalar( radius * LightningStrike.COS30DEG );\n\t\tthis.down.copy( up ).multiplyScalar( - radius * LightningStrike.SIN30DEG );\n\n\t\tconst p = this.vPos;\n\t\tconst v = this.vertices;\n\n\t\tp.copy( pos ).sub( this.side ).add( this.down );\n\n\t\tv[ this.currentCoordinate ++ ] = p.x;\n\t\tv[ this.currentCoordinate ++ ] = p.y;\n\t\tv[ this.currentCoordinate ++ ] = p.z;\n\n\t\tp.copy( pos ).add( this.side ).add( this.down );\n\n\t\tv[ this.currentCoordinate ++ ] = p.x;\n\t\tv[ this.currentCoordinate ++ ] = p.y;\n\t\tv[ this.currentCoordinate ++ ] = p.z;\n\n\t\tp.copy( up ).multiplyScalar( radius ).add( pos );\n\n\t\tv[ this.currentCoordinate ++ ] = p.x;\n\t\tv[ this.currentCoordinate ++ ] = p.y;\n\t\tv[ this.currentCoordinate ++ ] = p.z;\n\n\t\tthis.currentVertex += 3;\n\n\t}\n\n\tcreateTriangleVerticesWithUVs( pos, up, forwards, radius, u ) {\n\n\t\t// Create an equilateral triangle (only vertices)\n\n\t\tthis.side.crossVectors( up, forwards ).multiplyScalar( radius * LightningStrike.COS30DEG );\n\t\tthis.down.copy( up ).multiplyScalar( - radius * LightningStrike.SIN30DEG );\n\n\t\tconst p = this.vPos;\n\t\tconst v = this.vertices;\n\t\tconst uv = this.uvs;\n\n\t\tp.copy( pos ).sub( this.side ).add( this.down );\n\n\t\tv[ this.currentCoordinate ++ ] = p.x;\n\t\tv[ this.currentCoordinate ++ ] = p.y;\n\t\tv[ this.currentCoordinate ++ ] = p.z;\n\n\t\tuv[ this.currentUVCoordinate ++ ] = u;\n\t\tuv[ this.currentUVCoordinate ++ ] = 0;\n\n\t\tp.copy( pos ).add( this.side ).add( this.down );\n\n\t\tv[ this.currentCoordinate ++ ] = p.x;\n\t\tv[ this.currentCoordinate ++ ] = p.y;\n\t\tv[ this.currentCoordinate ++ ] = p.z;\n\n\t\tuv[ this.currentUVCoordinate ++ ] = u;\n\t\tuv[ this.currentUVCoordinate ++ ] = 0.5;\n\n\t\tp.copy( up ).multiplyScalar( radius ).add( pos );\n\n\t\tv[ this.currentCoordinate ++ ] = p.x;\n\t\tv[ this.currentCoordinate ++ ] = p.y;\n\t\tv[ this.currentCoordinate ++ ] = p.z;\n\n\t\tuv[ this.currentUVCoordinate ++ ] = u;\n\t\tuv[ this.currentUVCoordinate ++ ] = 1;\n\n\t\tthis.currentVertex += 3;\n\n\t}\n\n\tcreatePrismFaces( vertex/*, index*/ ) {\n\n\t\tconst indices = this.indices;\n\t\tvertex = this.currentVertex - 6;\n\n\t\tindices[ this.currentIndex ++ ] = vertex + 1;\n\t\tindices[ this.currentIndex ++ ] = vertex + 2;\n\t\tindices[ this.currentIndex ++ ] = vertex + 5;\n\t\tindices[ this.currentIndex ++ ] = vertex + 1;\n\t\tindices[ this.currentIndex ++ ] = vertex + 5;\n\t\tindices[ this.currentIndex ++ ] = vertex + 4;\n\t\tindices[ this.currentIndex ++ ] = vertex + 0;\n\t\tindices[ this.currentIndex ++ ] = vertex + 1;\n\t\tindices[ this.currentIndex ++ ] = vertex + 4;\n\t\tindices[ this.currentIndex ++ ] = vertex + 0;\n\t\tindices[ this.currentIndex ++ ] = vertex + 4;\n\t\tindices[ this.currentIndex ++ ] = vertex + 3;\n\t\tindices[ this.currentIndex ++ ] = vertex + 2;\n\t\tindices[ this.currentIndex ++ ] = vertex + 0;\n\t\tindices[ this.currentIndex ++ ] = vertex + 3;\n\t\tindices[ this.currentIndex ++ ] = vertex + 2;\n\t\tindices[ this.currentIndex ++ ] = vertex + 3;\n\t\tindices[ this.currentIndex ++ ] = vertex + 5;\n\n\t}\n\n\tcreateDefaultSubrayCreationCallbacks() {\n\n\t\tconst random1 = this.randomGenerator.random;\n\n\t\tthis.onDecideSubrayCreation = function ( segment, lightningStrike ) {\n\n\t\t\t// Decide subrays creation at parent (sub)ray segment\n\n\t\t\tconst subray = lightningStrike.currentSubray;\n\n\t\t\tconst period = lightningStrike.rayParameters.subrayPeriod;\n\t\t\tconst dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n\n\t\t\tconst phase0 = ( lightningStrike.rayParameters.isEternal && subray.recursion == 0 ) ? - random1() * period : MathUtils.lerp( subray.birthTime, subray.endPropagationTime, segment.fraction0 ) - random1() * period;\n\n\t\t\tconst phase = lightningStrike.time - phase0;\n\t\t\tconst currentCycle = Math.floor( phase / period );\n\n\t\t\tconst childSubraySeed = random1() * ( currentCycle + 1 );\n\n\t\t\tconst isActive = phase % period <= dutyCycle * period;\n\n\t\t\tlet probability = 0;\n\n\t\t\tif ( isActive ) {\n\n\t\t\t\tprobability = lightningStrike.subrayProbability;\n\t\t\t\t// Distribution test: probability *= segment.fraction0 > 0.5 && segment.fraction0 < 0.9 ? 1 / 0.4 : 0;\n\n\t\t\t}\n\n\t\t\tif ( subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability ) {\n\n\t\t\t\tconst childSubray = lightningStrike.addNewSubray();\n\n\t\t\t\tconst parentSeed = lightningStrike.randomGenerator.getSeed();\n\t\t\t\tchildSubray.seed = childSubraySeed;\n\t\t\t\tlightningStrike.randomGenerator.setSeed( childSubraySeed );\n\n\t\t\t\tchildSubray.recursion = subray.recursion + 1;\n\t\t\t\tchildSubray.maxIterations = Math.max( 1, subray.maxIterations - 1 );\n\n\t\t\t\tchildSubray.linPos0.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\n\t\t\t\tchildSubray.linPos1.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\n\t\t\t\tchildSubray.up0.copy( subray.up0 );\n\t\t\t\tchildSubray.up1.copy( subray.up1 );\n\t\t\t\tchildSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n\t\t\t\tchildSubray.radius1 = Math.min( lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor );\n\n\t\t\t\tchildSubray.birthTime = phase0 + ( currentCycle ) * period;\n\t\t\t\tchildSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n\n\t\t\t\tif ( ! lightningStrike.rayParameters.isEternal && subray.recursion == 0 ) {\n\n\t\t\t\t\tchildSubray.birthTime = Math.max( childSubray.birthTime, subray.birthTime );\n\t\t\t\t\tchildSubray.deathTime = Math.min( childSubray.deathTime, subray.deathTime );\n\n\t\t\t\t}\n\n\t\t\t\tchildSubray.timeScale = subray.timeScale * 2;\n\t\t\t\tchildSubray.roughness = subray.roughness;\n\t\t\t\tchildSubray.straightness = subray.straightness;\n\t\t\t\tchildSubray.propagationTimeFactor = subray.propagationTimeFactor;\n\t\t\t\tchildSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n\n\t\t\t\tlightningStrike.onSubrayCreation( segment, subray, childSubray, lightningStrike );\n\n\t\t\t\tlightningStrike.randomGenerator.setSeed( parentSeed );\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst vec1Pos = new Vector3();\n\t\tconst vec2Forward = new Vector3();\n\t\tconst vec3Side = new Vector3();\n\t\tconst vec4Up = new Vector3();\n\n\t\tthis.onSubrayCreation = function ( segment, parentSubray, childSubray, lightningStrike ) {\n\n\t\t\t// Decide childSubray origin and destination positions (pos0 and pos1) and possibly other properties of childSubray\n\n\t\t\t// Just use the default cone position generator\n\t\t\tlightningStrike.subrayCylinderPosition( segment, parentSubray, childSubray, 0.5, 0.6, 0.2 );\n\n\t\t};\n\n\t\tthis.subrayConePosition = function ( segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor ) {\n\n\t\t\t// Sets childSubray pos0 and pos1 in a cone\n\n\t\t\tchildSubray.pos0.copy( segment.pos0 );\n\n\t\t\tvec1Pos.subVectors( parentSubray.pos1, parentSubray.pos0 );\n\t\t\tvec2Forward.copy( vec1Pos ).normalize();\n\t\t\tvec1Pos.multiplyScalar( segment.fraction0 + ( 1 - segment.fraction0 ) * ( random1() * heightFactor ) );\n\t\t\tconst length = vec1Pos.length();\n\t\t\tvec3Side.crossVectors( parentSubray.up0, vec2Forward );\n\t\t\tconst angle = 2 * Math.PI * random1();\n\t\t\tvec3Side.multiplyScalar( Math.cos( angle ) );\n\t\t\tvec4Up.copy( parentSubray.up0 ).multiplyScalar( Math.sin( angle ) );\n\n\t\t\tchildSubray.pos1.copy( vec3Side ).add( vec4Up ).multiplyScalar( length * sideWidthFactor * ( minSideWidthFactor + random1() * ( 1 - minSideWidthFactor ) ) ).add( vec1Pos ).add( parentSubray.pos0 );\n\n\t\t};\n\n\t\tthis.subrayCylinderPosition = function ( segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor ) {\n\n\t\t\t// Sets childSubray pos0 and pos1 in a cylinder\n\n\t\t\tchildSubray.pos0.copy( segment.pos0 );\n\n\t\t\tvec1Pos.subVectors( parentSubray.pos1, parentSubray.pos0 );\n\t\t\tvec2Forward.copy( vec1Pos ).normalize();\n\t\t\tvec1Pos.multiplyScalar( segment.fraction0 + ( 1 - segment.fraction0 ) * ( ( 2 * random1() - 1 ) * heightFactor ) );\n\t\t\tconst length = vec1Pos.length();\n\t\t\tvec3Side.crossVectors( parentSubray.up0, vec2Forward );\n\t\t\tconst angle = 2 * Math.PI * random1();\n\t\t\tvec3Side.multiplyScalar( Math.cos( angle ) );\n\t\t\tvec4Up.copy( parentSubray.up0 ).multiplyScalar( Math.sin( angle ) );\n\n\t\t\tchildSubray.pos1.copy( vec3Side ).add( vec4Up ).multiplyScalar( length * sideWidthFactor * ( minSideWidthFactor + random1() * ( 1 - minSideWidthFactor ) ) ).add( vec1Pos ).add( parentSubray.pos0 );\n\n\t\t};\n\n\t}\n\n\tcreateSubray() {\n\n\t\treturn {\n\n\t\t\tseed: 0,\n\t\t\tmaxIterations: 0,\n\t\t\trecursion: 0,\n\t\t\tpos0: new Vector3(),\n\t\t\tpos1: new Vector3(),\n\t\t\tlinPos0: new Vector3(),\n\t\t\tlinPos1: new Vector3(),\n\t\t\tup0: new Vector3(),\n\t\t\tup1: new Vector3(),\n\t\t\tradius0: 0,\n\t\t\tradius1: 0,\n\t\t\tbirthTime: 0,\n\t\t\tdeathTime: 0,\n\t\t\ttimeScale: 0,\n\t\t\troughness: 0,\n\t\t\tstraightness: 0,\n\t\t\tpropagationTimeFactor: 0,\n\t\t\tvanishingTimeFactor: 0,\n\t\t\tendPropagationTime: 0,\n\t\t\tbeginVanishingTime: 0\n\n\t\t};\n\n\t}\n\n\tcreateSegment() {\n\n\t\treturn {\n\t\t\titeration: 0,\n\t\t\tpos0: new Vector3(),\n\t\t\tpos1: new Vector3(),\n\t\t\tlinPos0: new Vector3(),\n\t\t\tlinPos1: new Vector3(),\n\t\t\tup0: new Vector3(),\n\t\t\tup1: new Vector3(),\n\t\t\tradius0: 0,\n\t\t\tradius1: 0,\n\t\t\tfraction0: 0,\n\t\t\tfraction1: 0,\n\t\t\tpositionVariationFactor: 0\n\t\t};\n\n\t}\n\n\tgetNewSegment() {\n\n\t\treturn this.raySegments[ this.currentSegmentIndex ++ ];\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.init( LightningStrike.copyParameters( {}, source.rayParameters ) );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( LightningStrike.copyParameters( {}, this.rayParameters ) );\n\n\t}\n\n}\n\nLightningStrike.prototype.isLightningStrike = true;\n\n// Ray states\nLightningStrike.RAY_INITIALIZED = 0;\nLightningStrike.RAY_UNBORN = 1;\nLightningStrike.RAY_PROPAGATING = 2;\nLightningStrike.RAY_STEADY = 3;\nLightningStrike.RAY_VANISHING = 4;\nLightningStrike.RAY_EXTINGUISHED = 5;\n\nLightningStrike.COS30DEG = Math.cos( 30 * Math.PI / 180 );\nLightningStrike.SIN30DEG = Math.sin( 30 * Math.PI / 180 );\n\nexport { LightningStrike };\n", "// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nclass SimplexNoise {\n\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\tdot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\tdot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\tdot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t// 3D simplex noise\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t// 4D simplex noise\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we\u2019re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n}\n\nexport { SimplexNoise };\n"],
  "mappings": "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",
  "names": []
}
